{"version":3,"sources":["components/Header/Header.js","components/Form/Form.js","components/Event/Event.js","components/EventsList/EventsList.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","state","name","category","location","handleInfoData","e","setState","target","value","handleSubmit","preventDefault","props","getEvents","onSubmit","this","uk-margin","type","placeholder","onChange","categories","map","key","id","name_localized","onClick","showFavorites","Component","Event","iconFavorite","toogleToFavorites","addOrDeleteFavorites","console","log","deleteFavorites","event","addFavorites","text","description","length","substring","concat","stringStart","stringEnd","dateStart","slice","split","reverse","join","dateEnd","title","logo","src","url","alt","validateTextDescription","convertDateFormat","start","local","end","venue","address","city","country","rel","href","EventsList","events","uk-grid","uk-height-match","API_URLS","search","App","loading","searchIsDone","favorites","getCategories","a","axios","get","response","data","icon","filter","favorite","localStorage","getItem","JSON","parse","setItem","stringify","uk-spinner","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bceb5ca4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n <header>\n  <h1 className='uk-text-center'>Events Hunter</h1>\n </header>\n)\n\nexport default Header;","import React , { Component } from 'react';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    category: '',\n    location: ''\n  }\n\n  handleInfoData = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.getEvents(this.state);\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n      >\n        <fieldset className='uk-fieldset'>\n\n          <div className='uk-column-1-5@m uk-margin-small-top' uk-margin='true'>\n\n            <div className='uk-margin-small' uk-margin='true'> {/*columna 1*/}\n              <input\n                name='name'\n                className='uk-input'\n                type='text'\n                placeholder='Search by name'\n                onChange={this.handleInfoData}\n              />\n            </div>\n\n            <div className='uk-margin-small' uk-margin='true'> {/*columna 2*/}\n              <input\n                name='location'\n                className='uk-input'\n                type='text'\n                placeholder='Search by city or address'\n                onChange={this.handleInfoData}\n              />\n            </div>\n\n            <div className='uk-margin-small' uk-margin='true'>{/*columna 3*/}\n              <select\n                name='category'\n                className='uk-select'\n                type='text'\n                onChange={this.handleInfoData}\n              >\n                <option value=''>-- Select category --</option>\n                {this.props.categories.map(category =>\n                  <option\n                    key={category.id}\n                    value={category.id}\n                  >{category.name_localized}</option>\n                )}\n              </select>\n            </div>\n\n            <div className='uk-margin-small' uk-margin='true'> {/*columna 4*/}\n              <input\n                className='uk-button uk-button-danger'\n                type='submit'\n                value='Search events'\n              />\n            </div>\n\n            <div className='uk-margin-small' uk-margin='true'> {/*columna 5*/}\n              <input\n                className='uk-button button-favorites'\n                value='favorites'\n                type='button'\n                onClick={this.props.showFavorites}\n              />\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    )\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\nclass Event extends Component { //event viene de props\n  state = {\n    iconFavorite: false,\n  }\n\n  validateTextDescription() {\n    let {text} = this.props.event.description;\n    if(text) {\n      text.length > 250 ? text = text.substring(0, 230).concat('...') : text = null; //limitar a 250 carácteres.\n    }\n    if(!text || text.length === 0) {\n      text = 'No description information.'\n    }\n    return text\n  }\n\n  convertDateFormat(stringStart, stringEnd) {\n    const dateStart = stringStart.slice(0, 10).split('-').reverse().join('-');\n    const dateEnd = stringEnd.slice(0, 10).split('-').reverse().join('-');\n    return dateStart === dateEnd ? <span>Date: {dateStart}</span> : <span>Date: from {dateStart} to {dateEnd}</span>\n   }\n\n  toogleToFavorites = () => {\n    this.setState({\n      iconFavorite: !this.state.iconFavorite ? true : false\n    })\n   /* [this.props.event.icon] = this.state.iconFavorite*/\n    this.addOrDeleteFavorites()\n  }\n\n  addOrDeleteFavorites = () => {\n    if(!this.state.iconFavorite) {\n      console.log('añade a favoritos')\n      this.props.addFavorites(this.props.event)\n    } else if(this.state.iconFavorite) {\n      console.log('elimina de favoritos')\n      this.props.deleteFavorites(this.props.event.id)\n    }\n  }\n\n  render() {\n    return (\n      <div className='center'>\n        <div className='uk-card-small uk-card-default uk-position-relative'>\n          <i className={this.state.iconFavorite\n                          ? 'fas fa-heart uk-position-absolute'\n                          : \"fas fa-plus uk-position-absolute\"}\n             title='Add to favorites'\n             onClick={this.toogleToFavorites}></i>\n          <div className='uk-card-media-top uk-flex uk-flex-center'>\n            {this.props.event.logo ? <img src={this.props.event.logo.url} alt={this.props.event.name} /> : null}\n          </div>\n\n          <div className='uk-card-body uk-flex uk-flex-column uk-flex-middle uk-flex-between'>\n            <h3 className='uk-card-title'>{this.props.event.name.text}</h3>\n            <p>{this.validateTextDescription()}</p>\n            <div>\n              <p className='uk-text-bold'>{this.convertDateFormat(this.props.event.start.local, this.props.event.end.local)}</p>\n              <p className='uk-text-bold'>Location: {this.props.event.venue.address.city}, {this.props.event.venue.address.country}</p>\n            </div>\n          </div>\n\n          <div className='uk-card-footer'>\n            <a target='_blank' rel='noopener noreferrer' href={this.props.event.url} className='uk-button uk-button-secondary'>\n              More information\n            </a>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Event;","import React from 'react';\nimport Event from '../Event/Event';\n\nconst EventsList = ({events, addFavorites, deleteFavorites}) => {\n  return (\n    <div className='uk-child-width-1-2@s uk-child-width-1-3@m uk-child-width-1-4@l' uk-grid='true' uk-height-match=\"target: .uk-card-body\">\n      {events.map(event => (\n        <Event\n          key={event.id} // al listar por map, siempre deben tener un key único\n          event={event}\n          addFavorites={addFavorites}\n          deleteFavorites={deleteFavorites}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default EventsList;","const BASE_API_URL = 'https://www.eventbriteapi.com/v3/'\nconst API_TOKEN = 'H3XNKDXWLEAP3RPVC4X6'\nconst sort_by = 'date'\n\nexport const API_URLS = {\n  categories: `${BASE_API_URL}categories/?token=${API_TOKEN}`,\n  events: (search) => `${BASE_API_URL}events/search/?expand=venue&q=${search.name}&categories=${search.category}&location.address=${search.location}&sort_by=${sort_by}&token=${API_TOKEN}`,\n}\n","import React, { Component, Fragment } from 'react';\nimport Header from './components/Header/Header';\nimport Form from './components/Form/Form';\nimport EventsList from './components/EventsList/EventsList';\nimport axios from 'axios';\nimport { API_URLS } from './constants';\n\nclass App extends Component {\n  state = {\n    categories: [],\n    events: [],\n    loading: false,\n    searchIsDone: false,\n    favorites: [],\n    showFavorites: false\n  }\n\n  componentDidMount() {\n    this.getCategories();\n\n    const favorites = localStorage.getItem('favorites')\n    this.setState({\n      favorites: favorites ? JSON.parse(favorites) : [], // lo convierte en un array de objetos\n    })\n  }\n\n  // almacenar los datos cuando se añaden o eliminan eventos a favoritos\n  componentDidUpdate() {\n    localStorage.setItem('favorites', JSON.stringify(this.state.favorites))\n  }\n\n\n  getCategories = async () => {\n    let response = await axios.get(API_URLS.categories); // hace la consulta, el método get viene por defecto, se puede poner o no.\n    this.setState({\n      ...this.state,\n      categories: response.data.categories, //from the API\n    })\n  }\n\n  getEvents = async (search) => {\n    this.setState({ ...this.state, loading: true })\n    let response = await axios(API_URLS.events(search)); //hace la consulta a la API y recoge la respuesta\n    console.log(response)\n    this.setState({\n      ...this.state,\n      events: response.data.events, //from the API\n      loading: false,\n      searchIsDone: true,\n      showFavorites: false\n    })\n  }\n\n  addFavorites = (event) => {\n    this.setState({\n      ...this.state,\n      favorites: [...this.state.favorites, event]\n    })\n    console.log(this.state.favorites.icon)\n  }\n\n  deleteFavorites = (id) => {\n    let favorites = this.state.favorites.filter(favorite => favorite.id !== id)\n    console.log(favorites)\n    this.setState({\n      ...this.state,\n      favorites: favorites\n    })\n  }\n\n  showFavorites = () => {\n    this.setState({\n      ...this.state,\n      showFavorites: true\n    })\n  }\n\n\n  render() {\n    return (\n      <Fragment>\n        <Header />\n          <Form\n            categories={this.state.categories}\n            getEvents={this.getEvents}\n            showFavorites={this.showFavorites}\n          />\n        <div className='uk-container-fluid uk-margin'>\n          {this.state.loading\n            ? <div className=\"uk-flex uk-flex-column center uk-margin-medium-top\">\n                <div uk-spinner=\"ratio: 3\"></div>\n                <p>Loading...</p>\n              </div>\n            : <EventsList\n                events={this.state.showFavorites\n                          ? this.state.favorites\n                          : this.state.events}\n                addFavorites={this.addFavorites}\n                deleteFavorites={this.deleteFavorites}\n              />\n          }\n          {this.state.searchIsDone && this.state.events.length === 0 && !this.state.loading\n            ? <p className=\"uk-position-center uk-margin-medium-top\">There are no events.</p> : null}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}